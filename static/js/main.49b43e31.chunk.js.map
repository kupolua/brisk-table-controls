{"version":3,"sources":["ControlPanel.js","serviceWorker.js","index.js"],"names":["jp","require","ControlPanel","window","BriskTableLogger","storage","logs","DEBUG","message","push","level","INFO","WARN","ERROR","reset","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","maxLength","minLength","url","json","undefined","source","path","paths","error","loader","activeIndex","isConfigurator","dropdownText","columnTitles","customFields","fetchData","bind","assertThisInitialized","displayConfigurator","renderBody","createTable","_this2","setState","that","Promise","resolve","reject","axios","get","then","data","catch","toString","result","keys","map","key","text","value","JSON","parse","dataSource","query","column","objectSpread","defineProperty","fieldName","columnName","columnWidth","isColumnVisible","console","log","_this3","i","react_default","a","createElement","Table","Row","Cell","Input","placeholder","onChange","e","_ref","_ref2","Checkbox","checked","toggle","_ref3","_this4","panes","menuItem","render","Tab","Pane","fluid","_ref4","Label","basic","color","pointing","Form","TextArea","rows","_ref5","style","flexDirection","justifyContent","alignItem","margin","Segment","onTabChange","Loader","active","Button","floated","onClick","marginTop","Menu","compact","borderless","Item","as","Dropdown","button","className","floating","labeled","icon","options","search","_ref6","length","label","_ref7","_ref8","celled","striped","Header","HeaderCell","colSpan","Body","Component","Boolean","location","hostname","match","ReactDOM","src_ControlPanel","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49b43e31.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Tab, Input, Form, Button, Label, Dropdown, Menu, Segment, Loader, Table, Checkbox } from 'semantic-ui-react';\nimport axios from 'axios';\n\nconst jp = require('jsonpath');\n\nlet log = window.BriskTableLogger = (function () {\n  let storage = [];\n\n  function logs() {\n    return storage;\n  }\n\n  function DEBUG(message) {\n    storage.push({level: 'DEBUG', message})\n  }\n\n  function INFO(message) {\n    storage.push({level: 'INFO', message})\n  }\n\n  function WARN(message) {\n    storage.push({level: 'WARN', message})\n  }\n\n  function ERROR(message) {\n    storage.push({level: 'ERROR', message})\n  }\n\n  function reset() {\n    storage = [];\n\n    return storage;\n  }\n\n  return {\n    logs,\n    DEBUG,\n    INFO,\n    WARN,\n    ERROR,\n    reset,\n  }\n})();\n\nclass ControlPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      maxLength: 50,\n      minLength: 10,\n      // url: undefined,\n      url: 'https://raw.githubusercontent.com/kupolua/web-presentation/master/json/db.json',\n      json: undefined,\n      source: undefined,\n      path: undefined,\n      paths: [],\n      error: undefined,\n      loader: false,\n      activeIndex: 0,\n      isConfigurator: false,\n      dropdownText: 'Select path',\n      columnTitles: [],\n      customFields: {},\n    };\n\n    this.fetchData = this.fetchData.bind(this);\n    this.displayConfigurator = this.displayConfigurator.bind(this);\n    this.renderBody = this.renderBody.bind(this);\n    this.createTable = this.createTable.bind(this);\n  }\n\n  fetchData() {\n    this.setState({ error: undefined, loader: true, dropdownText: 'Select path' });\n\n    if(this.state.activeIndex === 0 || this.state.url) {\n      if(!this.state.url) {this.setState({error: 'Empty url!', paths: [], loader: false}); return}\n\n      const url = this.state.url;\n      let that = this;\n      let source = new Promise(function(resolve, reject) {\n        axios.get(url).then((data) => {\n          resolve(data);\n        })\n            .catch((error) => {\n              that.setState({ error: error.toString(), paths: [], loader: false });\n            });\n      }, this);\n\n      source.then(result => {\n        let paths = [];\n\n        //todo: check correct json format\n        Object.keys(result.data).map(path => {\n          paths.push({key: path, text: path, value: path})\n        });\n\n        this.setState({ paths, loader: false, source: result.data })\n      });\n    } else {\n      if(!this.state.json) {this.setState({error: 'Empty json!', paths: [], loader: false}); return}\n\n      try {\n        let source = JSON.parse(this.state.json);\n        let paths = [];\n\n        Object.keys(source).map(path => {\n          paths.push({key: path, text: path, value: path})\n        });\n\n        this.setState({ paths, loader: false, source })\n      } catch (error) {\n        this.setState({ error: error.toString(), paths: [], loader: false })\n      }\n    }\n  };\n\n  displayConfigurator(value) {\n    // console.log('displayConfigurator (value) {, value', value);\n    let dataSource = jp.query(this.state.source, value);\n    let columnTitles = Object.keys(dataSource[0][0]);\n    let customFields = {};\n\n    columnTitles.map(column => {\n      customFields = {\n        ...customFields,\n        [column]: {\n          fieldName: column,\n          columnName: column,\n          columnWidth: 10,\n          isColumnVisible: true\n        }\n      }\n    });\n    // [{\"fieldName\":\"firstName\",\"columnName\":\"firstName\",\"columnWidth\":15}],\n\n    this.setState({ dropdownText: value, isConfigurator: true, columnTitles, customFields });\n\n    // console.log('displayConfigurator (value) {, dataSource', dataSource[0][0]);\n    // console.log('displayConfigurator (value) {, columnTitles', columnTitles);\n    console.log('displayConfigurator (value) {, customFields', customFields);\n  }\n\n  createTable() {\n    console.log('createTable() {, this.state.customFields', this.state.customFields);\n  }\n\n  renderBody() {\n    return this.state.columnTitles.map((column, i) => {\n      return (\n          <Table.Row key={i}>\n            <Table.Cell> {column} </Table.Cell>\n            <Table.Cell>\n              <Input\n                  placeholder='column name'\n                  onChange={ (e, { value }) => {\n                    let { customFields } = this.state;\n                    customFields[column].columnName = value;\n\n                    this.setState({ customFields })\n                  }}\n              />\n            </Table.Cell>\n            <Table.Cell>\n              <Input\n                  placeholder='width'\n                  onChange={ (e, { value }) => {\n                    let { customFields } = this.state;\n                    customFields[column].columnWidth = value;\n\n                    this.setState({ customFields })\n                  }}\n              />\n            </Table.Cell>\n            <Table.Cell>\n              <Checkbox\n                  checked={this.state.customFields[column].isColumnVisible}\n                  toggle\n                  onChange={ (e, { checked }) => {\n                    let { customFields } = this.state;\n                    customFields[column].isColumnVisible = checked;\n\n                    this.setState({ customFields })\n                  }}\n              />\n            </Table.Cell>\n            <Table.Cell> hide </Table.Cell>\n          </Table.Row>\n      )\n    })\n  }\n\n  render() {\n    const panes = [\n      { menuItem: 'Input url', render: () => <Tab.Pane><\n            Input fluid placeholder='url' onChange={ (e, { value }) => this.setState({ url: value }) }/>\n            {this.state.error ? <Label basic color='red' pointing>\n              {this.state.error}\n            </Label> : null}\n        </Tab.Pane> },\n      { menuItem: 'Input json', render: () => <Tab.Pane>\n          <Form>\n            <Form.TextArea rows='10' placeholder='Input json' onChange={ (e, { value }) => this.setState({ json: value }) } />\n            {this.state.error ? <Label basic color='red' pointing>\n              {this.state.error}\n            </Label> : null}\n          </Form>\n        </Tab.Pane> },\n    ];\n\n    return (\n      <div style={{ flexDirection: 'column', justifyContent : 'center', alignItem: 'center', margin: 20 }}>\n        <Segment>\n          <Tab panes={panes} onTabChange={(e, data) => this.setState({\n            url: undefined,\n            json: undefined,\n            error: undefined,\n            paths: [],\n            activeIndex: data.activeIndex,\n            isConfigurator: false,\n            dropdownText: 'Select path',\n            columnTitles: [],\n          })} />\n          <Loader active={this.state.loader} />\n        </Segment>\n        <div style={{margin: 10}}>\n          <Button basic color='green' floated='right' onClick={() => this.fetchData()}>\n            Fetch data\n          </Button>\n        </div>\n        <div style={{ marginTop: 90}}>\n          <Menu compact borderless>\n            <Menu.Item as='a'>\n              <Dropdown\n                  button\n                  className='icon'\n                  floating\n                  labeled\n                  icon='world'\n                  options={this.state.paths}\n                  search\n                  text={this.state.dropdownText}\n                  onChange={(e, {value}) => this.displayConfigurator(value)}\n              />\n              {this.state.paths.length > 0 ? <Label color='red' floating>\n                {this.state.paths.length}\n              </Label> : null}\n            </Menu.Item>\n          </Menu>\n        </div>\n        <div style={{ flexDirection: 'column', justifyContent : 'center', alignItem: 'center', marginTop: 20 }}>\n          <h4>Configure</h4>\n          <Input label='max length' placeholder={this.state.maxLength} onChange={ (e, { value }) => this.setState({ maxLength: value }) } />\n        </div>\n        <div style={{marginTop: 20}}>\n          <Input label='min length' placeholder={this.state.minLength} onChange={ (e, { value }) => this.setState({ minLength: value }) } />\n        </div>\n        <div style={{ marginTop: 20 }}>\n          {this.state.isConfigurator\n              ? <div>\n                  <Table celled striped>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.HeaderCell colSpan='5'>Columns</Table.HeaderCell>\n                      </Table.Row>\n                      </Table.Header>\n                      <Table.Body>\n                        {this.renderBody()}\n                      </Table.Body>\n                  </Table>\n                  <div style={{margin: 10}}>\n                    <Button basic color='green' floated='right' onClick={() => this.createTable()}>\n                      Create table\n                    </Button>\n                  </div>\n                </div>\n            : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ControlPanel;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ControlPanel from './ControlPanel';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ControlPanel />, document.getElementById('brisk-table'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}